name: Deploy a subset of management groups using an SPN
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-management-groups:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      TopLevelManagementGroupId: ${{ steps.managementGroups.outputs.TopManagementGroupId }}
    steps:
      - uses: actions/checkout@v2
      
      - uses: azure/login@v1
        name: Azure OIDC login
        with:         
          tenant-id: ${{ secrets.TENANT_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
          allow-no-subscriptions: true
          enable-AzPSSession: true
      
      - uses: azure/powershell@v1
        name: Reading all MGs
        with:
          inlineScript: |
            Install-Module -Name Az -AllowClobber -Force -Scope CurrentUser -Repository PSGallery -MinimumVersion '9.6.0'
            Import-Module Az -MinimumVersion '9.6.0'
            Get-AzManagementGroup -GroupName ${{ secrets.TOP_MANAGEMENT_GROUP_ID}} -Expand -Recurse
          azPSVersion: "latest"

      - shell: pwsh
        name: Processing Subscriptions and Management Groups
        id: managementGroups
        run: |
          Get-Module Az -ListAvailable
          Import-Module Az -MinimumVersion '9.6.0'
          ./process-management-groups-structure.ps1
      
      - shell: pwsh
        name: Read env variables
        run: |
          Get-ChildItem env: | fl
          
      - uses: azure/powershell@v1
        name: Re-Reading all MGs
        with:
          inlineScript: |
            Import-Module Az -MinimumVersion '9.6.0'
            Get-AzManagementGroup -GroupName ${{ secrets.TOP_MANAGEMENT_GROUP_ID}} -Expand -Recurse
          azPSVersion: "latest"
  
  deploy-policy-definitions-and-assignments:
    needs: deploy-management-groups
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v2

      - run: echo "TopLevelManagementGroupId $TopLevelManagementGroupId"
        env:
          TopLevelManagementGroupId: ${{needs.deploy-management-groups.outputs.TopLevelManagementGroupId}}